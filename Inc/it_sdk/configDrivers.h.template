/* ==========================================================
 * configDrivers.h - 
 * Project : Disk91 SDK
 * ----------------------------------------------------------
 * Created on: 7 nov. 2018
 *     Author: Paul Pinault aka Disk91
 * ----------------------------------------------------------
 * Copyright (C) 2018 Disk91
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU LESSER General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * ----------------------------------------------------------
 * 
 *
 * ==========================================================
 */

#ifndef INC_IT_SDK_CONFIGDRIVERS_H_
#define INC_IT_SDK_CONFIGDRIVERS_H_

#include <it_sdk/config_defines.h>


// *************************************** EEPROM *****************************************************************

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// | SDK SETTING                   | USER SELECTED VALUE                  | SETTING DESCRIPTION                   |
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ------------------------------------------------------------------------
// EEPROM : M95640

#define ITSDK_DRIVERS_M95640					__DISABLE					// this driver is activated in build
#if ITSDK_DRIVERS_M95640 == __ENABLE
	#define __SPI_INCLUDED
	#include "spi.h"
#endif
#define ITSDK_DRIVERS_M95640_SPI				hspi1						// Spi port to be used for communications
#define ITSDK_DRIVERS_M95640_SPI_CS_BANK		__BANK_B					// EEPROM Chip Select PIN LAYOUT (Activ Low)
#define ITSDK_DRIVERS_M95640_SPI_CS_PIN			__LP_GPIO_4					//   Config as output, pull-up init High


// *************************************** ENVIRONMENTAL SENSORS **************************************************


// ------------------------------------------------------------------------
// Temp / Humidity / Pressure : BME280 / BMP280

#define ITSDK_DRIVERS_BME280					__DISABLE					// BOSH BME 280 Temp / Hygro / Pressure
#if ITSDK_DRIVERS_BME280 == __ENABLE										// BOSH BMP 280 Temp / Pressure
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/temphygropressure/bosh_bme280/bme280.h>
#endif
#define ITSDK_DRIVERS_BME280_I2C				hi2c1						// I2C port to be used for communications
#define __BME280_SDO_HIGH						0x1
#define __BME280_SDO_LOW						0x0
#define ITSDK_DRIVERS_BME280_ADDRESS			(DRIVER_BME280_DEVICE_ADR | __BME280_SDO_LOW)	//   Device address base on electrical conf

// ------------------------------------------------------------------------
// Temp / Pressure : Omron 2SMPB-02B

#define ITSDK_DRIVERS_O2SMPB					__DISABLE					// OMRON 2SMPB Temp / Pressure - pin2pin compatible with BME280
#if ITSDK_DRIVERS_O2SMPB == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/temphygropressure/omron_2smpb-02b/o_2smpb.h>
#endif
#define ITSDK_DRIVERS_02SMPB_I2C				hi2c1						// I2C port to be used for communications
#define __O2SMPB_SDO_HIGH						0x56
#define __O2SMPB_SDO_LOW						0x70
#define ITSDK_DRIVERS_O2SMPB_ADDRESS			__O2SMPB_SDO_LOW			//   Device address base on electrical conf
#define ITSDK_DRIVERS_O2SMPB_VERSION			0x2B						//   Sub type, the data decoding is different depending on version

// ------------------------------------------------------------------------
// Temp / Pressure : INFINEON DPS422

#define ITSDK_DRIVERS_DPS422					__DISABLE					// INFINEO DPS422 Temp / Pressure - pin2pin compatible with BME280
#if ITSDK_DRIVERS_DPS422 == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/temphygropressure/infineon_dps422/dps422.h>
#endif
#define ITSDK_DRIVERS_DPS422_I2C				hi2c1						// I2C port to be used for communications
#define __DPS422_SDO_HIGH						0x77
#define __DPS422_SDO_LOW						0x76
#define ITSDK_DRIVERS_DPS422_ADDRESS			__DPS422_SDO_LOW			//   Device address base on electrical conf
#define ITSDK_DRIVERS_DPS422_SAVERAM			__DISABLE					//   Optimize driver for less memory, many more I2C communications

// ------------------------------------------------------------------------
// Light sensor : MAX44009

#define ITSDK_DRIVERS_MAX44009					__DISABLE
#if ITSDK_DRIVERS_MAX44009 == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/light/max44009/max44009.h>
#endif
#define ITSDK_DRIVERS_MAX44009_I2C				hi2c1						// I2C port to be used for communications
#define __MAX44009_A0_HIGH						0x1
#define __MAX44009_A0_LOW						0x0
#define ITSDK_DRIVERS_MAX44009_ADDRESS			(DRIVER_MAX44009_DEVICE_ADR | __MAX44009_A0_LOW)	// Device address, based on the schematics

// ******************************************* GNSS *********************************************************************

// -------------------------------------------------------------------------
// Gnss : COMMON

#define ITSDK_DRIVERS_WITH_GNSS_DRIVER				__DISABLE
#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE

#define ITSDK_DRIVERS_GNSS_SERIAL 					__UART_USART1				// Select the Serial port used for the communication
#define ITSDK_DRIVERS_GNSS_LINEBUFFER				256							// Buffer to store the serial chars until we get a full line																															//  select __UART_NONE if none

#define ITSDK_DRIVERS_GNSS_WITHGPSSAT				__ENABLE					// Store details of the GPS Sat in memory
#define ITSDK_DRIVERS_GNSS_WITHGLOSAT				__ENABLE					// Store details of the GLONASS Sat in memory
#define ITSDK_DRIVERS_GNSS_WITHGALSAT				__DISABLE					// Store details of the GALILEO Sat in memory

#define ITSDK_DRIVERS_GNSS_WITH_UTCDATE_FULL		__DISABLE					// Convert the Date+Time into UTC timestamp
																				//  this feature coset up to 6KB of flash footprint.
																				//  when _DISABLE, only HH:MM:SS is taken into consideration

																				// What GPS information is needed, this helps to filter the
																				// unused GPS NEMA messages and saves processing / energy
#define ITSDK_DRIVERS_GNSS_POSINFO		(   __GNSS_WITH_2DPOS 					/* Lat / Lng */ \
										  | __GNSS_WITH_3DPOS					/* Altitude */ \
										  | __GNSS_WITH_TIME					/* UTC time of the day */\
										  | __GNSS_WITH_DATE					/* UTC Date */\
										  | __GNSS_WITH_HDOP					/* Hdop */\
										  | __GNSS_WITH_PDOP_VDOP				/* VDOP + PDOP */\
										  | __GNSS_WITH_SAT_DETAILS				/* Sat in view and signal level*/\
										  | __GNSS_WITH_SPEED					/* Speed */\
										  | __GNSS_WITH_COG						/* Course over ground - direction*/\
										)
#include <it_sdk/gnss/gnss.h>


// -------------------------------------------------------------------------
// GNSS : L80 & L86

#define ITSDK_DRIVERS_GNSS_QUECTEL			__DISABLE
#if ITSDK_DRIVERS_GNSS_QUECTEL == __ENABLE
	#include <drivers/gnss/quectel/quectel.h>
    #define ITSDK_DRIVERS_GNSS_QUECTEL_MODEL	DRIVER_GNSS_QUECTEL_MODEL_L86
	#if ITSDK_WITH_UART_RXIRQ == __UART_NONE ||  ITSDK_WITH_UART_RXIRQ_BUFSZ < 64
	  #warning "For GNSS, UART under interrupt is recommended and buffer size higher than 64 is also recommended"
	#endif
#endif
#define ITSDK_DRIVERS_GNSS_QUECTEL_NRESET_BANK		__BANK_B					// Pin to control the quectel GNSS Reset signal
#define ITSDK_DRIVERS_GNSS_QUECTEL_NRESET_PIN		__LP_GPIO_6					//    __LP_GPIO_NONE if not used
#define ITSDK_DRIVERS_GNSS_QUECTEL_L86_FORCEON_BANK	__BANK_B					// Pin to control the L86 Force On signal. When __LP_GPIO_NONE the backup mode is disabled
#define ITSDK_DRIVERS_GNSS_QUECTEL_L86_FORCEON_PIN	__LP_GPIO_15
#define ITSDK_DRIVERS_GNSS_QUECTEL_L8X_POWERON_BANK	__BANK_B					// Pin to control the L80/L86 VCC_ENABLE on
#define ITSDK_DRIVERS_GNSS_QUECTEL_L8X_POWERON_PIN	__LP_GPIO_NONE				//  an external power switch. When __LP_GPIO_NONE the backup mode is disabled
										  	  	  	  	  	  	  	  	  	  	// L86 backup mode not working correctly, you need to use it also for this module.
#define ITSDK_DRIVERS_GNSS_QUECTEL_L8X_SERIAL_DISC	__DISABLE					// The way serial line works on quectel is source of trouble, you could have to disable it when the
																				//  GNSS is on hold. Putting the Serial Line with a pull-up sound a good choice and could avoid the use of this.
#endif // ITSDK_DRIVERS_WITH_GNSS_DRIVER

// *************************************** ACCELEROMETERS *****************************************************************

// -------------------------------------------------------------------------
// Accelerometers : COMMON

#define ITSDK_DRIVERS_WITH_ACCEL_DRIVER				__DISABLE				// Enable ACCELEROMETER code
#define ITSDK_DRIVERS_ACCEL_DATABLOCK_BUFFER_SZ		64						// Buffer size to store the pending accelerometer data
																			//  x6 Bytes / Must be a power of 2
#define ITSDK_DRIVERS_ACCEL_DATABLOCK_BUFFER_WTM	32						// Software Watermark to process the DATABLOCK Transfert to
																			//  the application layer
#define ITSDK_DRIVERS_ACCEL_WITH_ANGLE				__DISABLE				// Movement angle determination code activated / deactivated  (save space 1.1K text 2K bss)

// -------------------------------------------------------------------------
// Accelerometers : LIS2DH12

#define ITSDK_DRIVERS_ACCEL_LIS2DH12			__DISABLE
#define ITSDK_DRIVERS_ACCEL_LIS2DH_LOG_LEVEL 	__LOG_LEVEL_VERBOSE_DEBUG	// Driver log level, you also need to activate ITSDK_LOGGER_MODULE with __LOG_MOD_ACCEL
#if ITSDK_DRIVERS_ACCEL_LIS2DH12 == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/accel/st_lis2dh12/lis2dh12.h>
	#define ITSDK_DRIVERS_ACCEL_LIS2DH_ADDRESS	  (DRIVER_LIS2DH_DEFAULT_ADDRESS | DRIVER_LIS2DH12_SA0_HIGH)
																			// Device address, based on the schematics
																			// Change it to fit the right configuration
																			// SA0_LOW can cause extra consumption as the device
																			//  setting to deactivate pull up seems to not working
#endif
#define ITSDK_DRIVERS_ACCEL_LIS2DH_I2C			hi2c1						// I2C port to be used for communications
#define ITSDK_DRIVERS_LIS2DH12_INT2_BANK		__BANK_B					// INT2 Pin ( the one used by the driver )
#define ITSDK_DRIVERS_LIS2DH12_INT2_PIN			__LP_GPIO_13				//   __LP_GPIO_NONE if not used
																			// -> the driver has been made to support at
																			//    least this interruption line. This is the default one
#define ITSDK_DRIVERS_LIS2DH12_INT1_BANK		__BANK_B					// INT1 Pin
#define ITSDK_DRIVERS_LIS2DH12_INT1_PIN			__LP_GPIO_NONE				//   __LP_GPIO_NONE if not used
																			//   This interrupt line is mandatory to manage fifo interrupt




// *************************************** ENERGY ****************************************************************

// ------------------------------------------------------------------------
// Gauge : MAX17205

#define ITSDK_DRIVERS_MAX17205					__DISABLE
#if ITSDK_DRIVERS_MAX17205 == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/gauge/max17205/max17205.h>
#endif
#define ITSDK_DRIVERS_MAX17205_I2C				hi2c1						// I2C port to be used for communications
#define ITSDK_DRIVERS_MAX17205_ALRT1_BANK		__BANK_B					// ALERT PIN Configuration
#define ITSDK_DRIVERS_MAX17205_ALRT1_PIN		__LP_GPIO_7					//   __LP_GPIO_NONE if not used
#define ITSDK_DRIVERS_MAX17205_RSENSE_MOHM		1000						// RSense in mOhm
#define ITSDK_DRIVERS_MAX17205_CSN_TO_BAT		__DISABLE					// For primary battery, CSN can be connected to bat to get a better precision of downside
																			// circuit consumption (Ap Note AN6414) - this change the coulomb counter direction
#define ITSDK_DRIVERS_MAX17205_CAPA_MAX			0							// Configure design capacity (enable if > 0) in mAh (max (65536 * 5 / RSENCE_MOHM)
#if (ITSDK_DRIVERS_MAX17205_CAPA_MAX * (ITSDK_DRIVERS_MAX17205_RSENSE_MOHM/5)) > 65535
  #Error "Invalid ITSDK_DRIVERS_MAX17205_CAPA_MAX value, will overflow"
#endif

// *************************************** COMMUNICATION **************************************************************

// ------------------------------------------------------------------------
// NFC Tag : ST25DV

#define ITSDK_DRIVERS_ST25DV					__DISABLE
#define ITSDK_DRIVERS_ST25DV_WITH_SERIALUZ		__DISABLE					// Activate the serial User communication code
#define ITSDK_DRIVERS_ST25DV_WITH_SERIALFTM		__DISABLE					// Activate the serial FTM communication code

#if ITSDK_DRIVERS_ST25DV == __ENABLE
	#ifndef __I2C_INCLUDED
	  #define __I2C_INCLUDED
	  #include "i2c.h"
	#endif
	#include <drivers/nfc/st25dv/st25dv.h>
#endif
#define ITSDK_DRIVERS_ST25DV_I2C				hi2c1						// I2C port to be used for communications
#define ITSDK_DRIVERS_ST25DV_GPO_BANK			__BANK_B					// GPO Pin
#define ITSDK_DRIVERS_ST25DV_GPO_PIN			__LP_GPIO_5					//   __LP_GPIO_NONE if not used
#define ITSDK_DRIVERS_ST25DV_LPD_BANK			__BANK_B					// LPD Pin
#define ITSDK_DRIVERS_ST25DV_LPD_PIN			__LP_GPIO_6					//   __LP_GPIO_NONE if not used

#define ITSDK_DRIVERS_ST25DV_I2C_PASSWORD		0x0000000000000000			// changeme => I2C password will be setup on device when != 0
																			// RF Password are 0000000000000000 by default. Only RF can set these password

																			// Only the first 1KB is accessible with a standard NFC read
																			// for the rest of the memory area an extended read is needed.
																			// For a larger reader compatibility, I assume it is better to have
																			//  the Zone 1 & Zone 2 under this 1KB limit.
#define ITSDK_DRIVERS_ST25DV_USER_Z1_SIZE		1024						// Size in byte for User Zone 1 - This zone have no security option
#define ITSDK_DRIVERS_ST25DV_USER_Z1_ACCESS		_ST25DV_ACCESS_RW_OPEN		// Zone 1 is read only

#define ITSDK_DRIVERS_ST25DV_USER_Z2_SIZE		1024						// Size in byte for User Zone 2
#define ITSDK_DRIVERS_ST25DV_USER_Z2_PASS		__ENABLE
#define ITSDK_DRIVERS_ST25DV_USER_Z2_ACCESS		_ST25DV_ACCESS_RO_OPEN		// Zone 2 is read only

#define ITSDK_DRIVERS_ST25DV_USER_Z3_SIZE		2048						// Size in byte for User Zone 2
#define ITSDK_DRIVERS_ST25DV_USER_Z3_PASS		__ENABLE
#define ITSDK_DRIVERS_ST25DV_USER_Z3_ACCESS		_ST25DV_ACCESS_RW_RWSECURED	// Zone 3 is RW both secured by a password

#define ITSDK_DRIVERS_ST25DV_USER_Z4_SIZE		4096						// The reality is Zone 4 is up the memory size.
#define ITSDK_DRIVERS_ST25DV_USER_Z4_PASS		__ENABLE
#define ITSDK_DRIVERS_ST25DV_USER_Z4_ACCESS		_ST25DV_ACCESS_RW_RWSECURED	// Zone 4 is RW both secured by a password

#define ITSDK_DRIVERS_ST25DV_SERIALUZ_ZONE		ST25DV_USERZONE_1			// The serial communication module on User Zone is using Zone 2
#define ITSDK_DRIVERS_ST25DV_SERIALUZ_OFFSET	42							// offset in block (x32b) in the USER Zone 42 = 168

// *************************************** MAGNETISM *****************************************************************

// ------------------------------------------------------------------------
// Hall : SL353

#define ITSDK_DRIVERS_SL353					__DISABLE
#if ITSDK_DRIVERS_SL353 == __ENABLE
	#include <drivers/hall/sl353/sl353.h>
#endif
#define ITSDK_DRIVERS_SL353_INT_BANK		__BANK_A						// HALL pin configuration
#define ITSDK_DRIVERS_SL353_INT_PIN			__LP_GPIO_0						//   __LP_GPIO_NONE if not used


#endif /* INC_IT_SDK_CONFIGDRIVERS_H_ */